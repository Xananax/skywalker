0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@2.1.10
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/xananax/projects/skywalker',
7 silly cache add   type: 'directory' }
8 verbose tar pack [ '/home/xananax/.npm/skywalker/0.2.2/package.tgz',
8 verbose tar pack   '/home/xananax/projects/skywalker' ]
9 verbose tarball /home/xananax/.npm/skywalker/0.2.2/package.tgz
10 verbose folder /home/xananax/projects/skywalker
11 info prepublish skywalker@0.2.2
12 verbose addLocalTarball adding from inside cache /home/xananax/.npm/skywalker/0.2.2/package.tgz
13 silly cache afterAdd skywalker@0.2.2
14 verbose afterAdd /home/xananax/.npm/skywalker/0.2.2/package/package.json not in flight; writing
15 verbose afterAdd /home/xananax/.npm/skywalker/0.2.2/package/package.json written
16 silly publish { name: 'skywalker',
16 silly publish   version: '0.2.2',
16 silly publish   description: 'Walks a directory tree and transforms loaded nodes',
16 silly publish   main: 'index.js',
16 silly publish   keywords: [ 'fs', 'directory', 'walk', 'eventEmitter' ],
16 silly publish   author: { name: 'xananax@yelostudio.com' },
16 silly publish   license: 'MIT',
16 silly publish   directories: { test: 'test' },
16 silly publish   dependencies:
16 silly publish    { mime: '^1.2.11',
16 silly publish      minimatch: '^1.0.0',
16 silly publish      'node.extend': '^1.0.10' },
16 silly publish   devDependencies:
16 silly publish    { chokidar: '^0.11.1',
16 silly publish      watch: '^0.13.0',
16 silly publish      gaze: '^0.6.4',
16 silly publish      chai: '^1.9.2',
16 silly publish      mocha: '^2.0.1',
16 silly publish      checksum: '^0.1.1',
16 silly publish      filesize: '^2.0.4',
16 silly publish      'image-size': '^0.3.5',
16 silly publish      markdown: '^0.5.0' },
16 silly publish   scripts: { test: 'mocha' },
16 silly publish   repository: { type: 'git', url: 'https://github.com/Xananax/skywalker.git' },
16 silly publish   bugs: { url: 'https://github.com/Xananax/skywalker/issues' },
16 silly publish   homepage: 'https://github.com/Xananax/skywalker',
16 silly publish   readme: '# Skywalker\n\nWalks a directory or a file and optionally applies transformations on the tree\'s members.\nThere are other modules that do the same, I didn\'t like them, rolled my own.\n\n_Can\'t believe skywalker was not already in use on npmjs._\n\n-----\n## Install\n```bash\n\tnpm install skywalker\n```\n\n----\n## Features\n\n - Easy to use\n - Callbacks or evented style\n - Directory sizes\n - Supports limited depth, regex filtering, glob matching, mime-type filtering, extension filtering\n - Easy as hell to write plugins for\n\n-----\n## Usage\n\n```js\n\tvar Tree = require(\'skywalker\');\n\n\tTree(\'~/some_dir\')\n\t\t.ignoreDotFiles()\n\t\t.ignore(/(^|\\/)_.*?$/g) //ignores files that begin with "_"\n\t\t.filter(/something/g,function(next,done){\n\t\t\tconsole.log(\'runs for each file or directory that match "something"\');\n\t\t\tnext()\n\t\t})\n\t\t.filter(/(^|\\/)_.*?$/g,function(next,done){\n\t\t\tconsole.log(\'rejects all files or directories that begin with "_"\',this._.path);\n\t\t\tdone(null,false);\n\t\t})\n\t\t.extensionFilter(\'json\',function(next,done){\n\t\t\tconsole.log(\'runs for each file that has a json extension\');\n\t\t\tvar file = this;\n\t\t\trequire(\'fs\').readFile(this._.path,{encoding:\'utf8\'},function(err,contents){\n\t\t\t\tif(err){\n\t\t\t\t\tfile._.error = err;\n\t\t\t\t\treturn next();\n\t\t\t\t}\n\t\t\t\tfile._.contents = contents;\n\t\t\t\ttry{\n\t\t\t\t\tfile.data = JSON.parse(contents);\n\t\t\t\t}catch(err){\n\t\t\t\t\tfile._.error = err;\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t})\n\t\t})\n\t\t.on(\'file\',function(file){console.log(\'file event:\',file._.path);})\n\t\t.on(\'directory\',function(file){console.log(\'directory event:\',file._.path);})\n\t\t.on(\'done\',function(file){console.log(\'-----------------------\');})\n\t\t.emitErrors(true)\n\t\t.on(\'error\',function(err){console.log(\'ERROR\',err);})\n\t\t.start(function(err,file){\n\t\t\tif(err){return console.log(err);}\n\t\t\tfor(var n in file){\n\t\t\t\tconsole.log(file[n]);\n\t\t\t}\n\t\t\t/**or**/\n\t\t\tvar children = file._.children;\n\t\t\tfor(var i=0 ; i < children.length ; i++){\n\t\t\t\tconsole.log(children[i]._.name);\n\t\t\t}\n\t\t})\n\t;\n```\n\nIf for some reason you want to set the root directory name later (not at instantiation), do that:\n\n```js\n\tTree()\n\t\t.file(\'path_to_file\')\n\t\t//other things\n\t\t.start(callback)\n\n```\n\nBy default, skywalker does not emit errors, as it is expected that they will be handled in callbacks.\nHowever, if you prefer event-style error handling, do the following:\n\n```js\n\tTree(dir)\n\t.emitError(true)\n\t.on(\'error\',function(err){\n\t\tconsole.log(\'error\',err);\n\t})\n\t.start(func);\n```\n\nDirectories children are accessible in two manners:\n```js\n\tvar t = Tree(dir).start(function(err,files){\n\t\t//either use:\n\t\tfiles._.children;\n\t\tfor(var i = 0, l = files._.children.length;i < l;i++){\n\t\t\tconsole.log(files._.children[i]._.filename);\n\t\t}\n\t\t//or:\n\t\tfiles[\'child_name.jpg\'];\n\t\t//or even:\n\t\tfiles[\'subdir\'][\'child_name.jpg\'];\n\t\tfor(var n in files){\n\t\t\tconsole.log(n,files[n]._.path);\n\t\t}\n\t});\n```\nChildren always exists on all `file` instances, even when they are not directories, so you can safely just loop, and the loop will not run when `children.length` is 0.  \nAny property other than children is not enumerable, so `for...in` loops are also safe to use without prior checking if the file is a directory.  \n\nHowever, if you have a filter running that disables files AND you are watching, then a file might be null, so you might want to do:\n\n```js\n\tvar t = Tree(dir).start(function(err,files){\n\t\tfor(var n in files){\n\t\t\tif(!files[n]){continue;}\n\t\t\tconsole.log(n,files[n]._.path);\n\t\t}\n\t});\n```\n\n\n-----\n## Files Properties\n\nAll properties (name, path, etc) are stored on a property named "_".\nThe following properties are to be found:\n\n\n - `file._.path`  full path to the file\n - `file._.dirname`  parent dir of the file\n - `file._.filename`  filename of the file, including extension\n - `file._.extension`  extension, without the dot, and in lowercase\n - `file._.name`  filename without extension\n - `file._.children`  only for directories: an array of children\n - `file._.parents`  an array of parents (backref to the parents)\n - `file._.contents`  empty, fill it with a string if your own callbacks\n - `file._.mime`  mimetype, for example \'text/plain\'\n - `file._.mime.type`  for example \'text\'\n - `file._.mime.subType` for example, \'plain\'\n - `file._.isDirectory` true for directories, false for everything else\n - and all `stats` properties, which are:\n \t+ `dev`\n \t+ `mode`\n \t+ `nlink`\n \t+ `uid`\n \t+ `gid`\n \t+ `rdev`\n \t+ `blksize`\n \t+ `ino`\n \t+ `size` works for directories too\n \t+ `blocks`\n \t+ `atime` converted to a unix timestamp\n \t+ `mtime` converted to a unix timestamp\n \t+ `ctime` converted to a unix timestamp\n\nPlugins may add properties to this object (see below).\n\nIf you have, in your path, a file or folder named "_", then the properties of its parent will be overwritten.\nIn that case, you have two options:  \n1 - Change the default namespace:\n```js\n\tTree.propertiesPropertyKey(\'_somethingsafe_\');\n\t// later...\n\tconsole.log(file._somethingsafe_.path)\n```\n2 - use the \'safe\' namespace:\n```js\n\tconsole.log(file.__________.path);\n\t// Yes, that\'s 10 "_".\n\t// If you have a file named like that too,\n\t// then you are shit out of luck.\n```\nNote that both keys are usable at all times.\n\nThe default toString() function outputs the file\'s path, but if you set the `contents` property of the file...\n\n```js\n\tfile._.contents = \'abcde\';\n```\n\n...Then this is what toString() will output.\n\n\nTo detect mimetypes, skywalker uses [node-mime](https://github.com/broofa/node-mime). It is made available on the `Tree.mime` namespace\n\n```js\n\t//define a new mime-type:\n\tTree.mime.define({\n\t\t\'text/jade\':[\'jade\']\n\t})\n```\n\n------\n## Watch\n\nSkywalker doesn\'t know how to watch, but it is "watch-ready". Thus, you are able to implement any watching system you like.\nswap `start([callback])` with `watch(watchFunction[,callback])`\n\n`watchFunction` receives two arguments: a "watchHelpers" object that contains helpers, and a callback function to run when ready.\n\n```js\n\tvar t = Tree(dir)\n\t\t.on(/** something, function **/)\n\t\t/**...**/\n\t\t.watch(function(watchHelpers,done){\n\t\t\tvar watcher = myWatchImplementation(watchHelpers.filename);\n\t\t\twatcher.on(\'new\',function(filename){\n\t\t\t\twatchHelper.onCreated(filename);\n\t\t\t});\n\t\t\twatcher.on(\'systemError\',function(err){\n\t\t\t\tdone(err);\n\t\t\t});\n\t\t\twatcher.on(\'ready\',function(){\n\t\t\t\tdone(null,function(){watcher.stop();})\n\t\t\t});\n\t\t},callback)\n\t;\n\t//later:\n\tt.unwatch(); //calls watcher.stop()\n```\n\nAvailable helpers are:\n\n- `watchHelpers.filename` the root directory\n- `watchHelpers.tree` the skywalker instance\n- `watchHelpers.onCreated(filepath)`\n- `watchHelpers.onChanged(filepath)`\n- `watchHelpers.onRemoved(filepath)`\n- `watchHelpers.onRenamed(filepathNew,filepathOld)`\n- `watchHelpers.onError(error)`\n\nLook in /watchers for an example implementation\n\nAs an alternative to implementing your own function, you may simply specify the implementation like so:\n```js\n\tvar t = Tree(dir)\n\t\t.on(/** something, function **/)\n\t\t/**...**/\n\t\t.watch(\'gaze\',callback)\n```\n\nAvailable implementations are [gaze](https://github.com/shama/gaze), [watch](https://github.com/mikeal/watch), and [chokidar](https://github.com/paulmillr/chokidar). Note that they are not bundled with skywalker and that you will have to install them separately.\n\n------\n## Events\n\nthe following events are emitted from Skywalker:\n\n- FILE: \'file\': emitted when a file is processed\n- DIRECTORY: \'directory\': emitted when a directory is processed\n- DONE: \'done\': emitted when all files have been processed\n- ERROR: \'error\': emitted when an error is encountered\n- CREATED: \'created\': emitted when a file or directory is created (if `watch()`ing)\n- REMOVED: \'remove\': emitted when a file or directory is deleted (if `watch()`ing)\n- CHANGED: \'change\': emitted when a file or directory is modified (if `watch()`ing)\n- RENAMED: \'rename\': emitted when a file or directory is renamed (if `watch()`ing)\n\nThe events strings live on Skywalker.Events, so instead of `on(\'error\')`, you can use `on(Tree.Events.ERROR)`.\n\n------\n## Filters\nThere are several available filters, they all have the same signature:\n`filterFunction(regex|glob|null,func)`\n\n- `regex or glob` is either a regex or a string. If nothing is provided, the filter will match every file and directory\n- `func` is a function with signature `callback(next,done)`. Next() processes the next file, and done() interrupts the current directory processing. You can call done(err) to output an error.\n\nAvailable filters are:\n\n- `filter(regex|glob,func)`: basic filter\n- `directoryFilter(regex|glob,func)`: acts only on directories\n- `fileFilter(regex|glob,func)`: acts only on files\n- `extensionFilter(string,func)`: you can provide a space-separated string of extension (`jpg jpeg bmp`), will act only on those extensions\n- `mimeFilter(regex|glob,func)`: will act only on matched mime type\n**Careful!** `fileFilter`, `mimefilter` and `extensionFilter` will *not* descend in sub-directories! Use a normal filter for that.\n\nAdditionally, you have some convenience filters to ignore things:\n- `ignore(regex|glob)`: will ignore files that match the pattern\n- `ignoreDirectories(regex|glob)`: you know what this does\n- `ignoreFiles(regex|glob)`: that too\n- `ignoreDotFiles()`: ignores files and directories that begin with \'.\'\n\nFor an wide array of examples, check out [skywalker-extended](https://github.com/Xananax/skywalker-extended)\n\n-----\n## Selectors\nSelectors run *after* the tree has been parsed and allow for further filtering.\n\n```js\n\tvar Tree = require(\'skywalker\');\n\tvar db = Tree.db;\n\tTree(__dirname)\n\t\t.ignoreDotFiles()\n\t\t.selectors(\'F & size > 6100\')\n\t\t.start(function(err,file){\n\t\t\tvar c = file._.children;\n\t\t\tfor(var n in c){console.log(c[n]._.path)}\n\t\t})\n```\n\nA selector presents itself as such:\n`property operator value`\n\n- `property` is any property of the file, found on the `_` object. That is any \'native\' property, or any property added by a plugin\n- `operator` is one of the operators below\n- `value` is the value compared to. some operators don\'t require a value\n\nYou can chain selectors with \'&\'.\nAvailable selectors are:\n\n- Selectors with properties:\n\t- `GREATER_THAN : \'>\'` example: `size > 6100`\n\t- `LOWER_THAN: \'<\'` example: `atime < 1416242596`\n\t- `GREATER_OR_EQUAL: \'>=\'` \n\t- `LOWER_OR_EQUAL: \'<=\'`\n\t- `EQUAL: \'==\'`\n\t- `EQUAL_STRICT: \'===\'`\n\t- `MATCHES: \'#\'` example: `path # node_modules`\n- Selectors that require a value only:\n\t- `EXTENSION: \'.\'` example `. jpg` (does not require a property)\n\t- `PATH: \'/\'` example `/ node_modules` (similar to the `matches` example above, but globbing is allowed)\n\t- `MIMETYPE: \'@\'` example: `@ text/javascript`\n- Selectors that require an operator only:\n\t- `ISDIR: \'D\'`\n\t- `ISFILE:\'F\'`\n\n-----\n## Plugins\n\nSkywalker ships with a few examples plugins (not loaded, copy-paste them where you need them). They are:\n\n- checksum: outputs a checksum string in a property called `checksum`. Needs the `checksum` module.\n- images: outputs size (width,height), imageMode (landscape, portrait, square) and ratio (1.xxx) to the "_" property of images. Needs the `image-size` module.\n- json: parses json files. Sets the raw data on the "\\_.contents" and the parsed data on "\\_.data"\n- markdown: parses markdown files. Sets the raw data on "\\_.contents" and the rendered content on "\\_.rendered". Needs the `markdown` module.\n- size: adds a human readable size property called `humanSize`. Needs the `filesize` module.\n- websafe: turns file names ("my nice image.jpeg") to a string that can be used in a classname or as an id ("my_nice_image"), and sets it on the "_.safename" property\n\nadd a plugin by calling  \n`Tree(dir).plugin(require(\'path-to-plugin\').start(...`\n\n**Be careful, order of filters and plugins does matter**\n\n-----\n## More Info & Examples\nCheck out the tests.\n* install moka and chai:\n`npm install -g mocha chai`\n* run the tests\n`cd skywalker && mocha`\n\n----\n## License\nMIT\n',
16 silly publish   readmeFilename: 'README.md',
16 silly publish   gitHead: 'd8498b51b4dca616695dffcb351332c70b4edcf5',
16 silly publish   _id: 'skywalker@0.2.2',
16 silly publish   _shasum: 'd96f0349da2e484df4579ceb70b29ad6a17a031f',
16 silly publish   _from: '.' }
17 silly mapToRegistry name skywalker
18 silly mapToRegistry using default registry
19 silly mapToRegistry registry https://registry.npmjs.org/
20 silly mapToRegistry uri https://registry.npmjs.org/skywalker
21 verbose publish registryBase https://registry.npmjs.org/
22 silly publish uploading /home/xananax/.npm/skywalker/0.2.2/package.tgz
23 verbose request uri https://registry.npmjs.org/skywalker
24 verbose request sending authorization for write operation
25 info attempt registry request try #1 at 03:10:24
26 verbose request id 7d21447c1d2b2961
27 http request PUT https://registry.npmjs.org/skywalker
28 http 403 https://registry.npmjs.org/skywalker
29 verbose headers { date: 'Wed, 26 Nov 2014 01:10:40 GMT',
29 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
29 verbose headers   'content-type': 'application/json',
29 verbose headers   'cache-control': 'max-age=60',
29 verbose headers   'content-length': '18690',
29 verbose headers   'accept-ranges': 'bytes',
29 verbose headers   via: '1.1 varnish',
29 verbose headers   'x-served-by': 'cache-fra1245-FRA',
29 verbose headers   'x-cache': 'MISS',
29 verbose headers   'x-cache-hits': '0',
29 verbose headers   'x-timer': 'S1416964225.421245,VS0,VE14948',
29 verbose headers   'keep-alive': 'timeout=10, max=50',
29 verbose headers   connection: 'Keep-Alive' }
30 verbose request invalidating /home/xananax/.npm/registry.npmjs.org/skywalker on PUT
31 error publish Failed PUT 403
32 verbose stack Error: forbidden cannot modify pre-existing version: 0.2.2
32 verbose stack old={"name":"skywalker","version":"0.2.2","description":"Walks a directory tree and transforms loaded nodes","main":"index.js","keywords":["fs","directory","walk","eventEmitter"],"author":{"name":"xananax@yelostudio.com"},"license":"MIT","directories":{"test":"test"},"dependencies":{"mime":"^1.2.11","minimatch":"^1.0.0","node.extend":"^1.0.10"},"devDependencies":{"chai":"^1.9.2","mocha":"^2.0.1","checksum":"^0.1.1","filesize":"^2.0.4","image-size":"^0.3.5","markdown":"^0.5.0"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/Xananax/skywalker.git"},"bugs":{"url":"https://github.com/Xananax/skywalker/issues"},"homepage":"https://github.com/Xananax/skywalker","gitHead":"2d7b7b93676dadb5b16476a94be847002f8f5124","_id":"skywalker@0.2.2","_shasum":"e832ecac58358847becbd23372a4157ea1b7ad9b","_from":".","_npmVersion":"2.1.7","_nodeVersion":"0.10.33","_npmUser":{"name":"xananax","email":"xananax@yelostudio.com"},"maintainers":[{"name":"xananax","email":"xananax@yelostudio.com"}],"dist":{"shasum":"e832ecac58358847becbd23372a4157ea1b7ad9b","tarball":"http://registry.npmjs.org/skywalker/-/skywalker-0.2.2.tgz"}}
32 verbose stack new={"name":"skywalker","version":"0.2.2","description":"Walks a directory tree and transforms loaded nodes","main":"index.js","keywords":["fs","directory","walk","eventEmitter"],"author":{"name":"xananax@yelostudio.com"},"license":"MIT","directories":{"test":"test"},"dependencies":{"mime":"^1.2.11","minimatch":"^1.0.0","node.extend":"^1.0.10"},"devDependencies":{"chokidar":"^0.11.1","watch":"^0.13.0","gaze":"^0.6.4","chai":"^1.9.2","mocha":"^2.0.1","checksum":"^0.1.1","filesize":"^2.0.4","image-size":"^0.3.5","markdown":"^0.5.0"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/Xananax/skywalker.git"},"bugs":{"url":"https://github.com/Xananax/skywalker/issues"},"homepage":"https://github.com/Xananax/skywalker","readme":"# Skywalker\u000a\u000aWalks a directory or a file and optionally applies transformations on the tree's members.\u000aThere are other modules that do the same, I didn't like them, rolled my own.\u000a\u000a_Can't believe skywalker was not already in use on npmjs._\u000a\u000a-----\u000a## Install\u000a```bash\u000a\u0009npm install skywalker\u000a```\u000a\u000a----\u000a## Features\u000a\u000a - Easy to use\u000a - Callbacks or evented style\u000a - Directory sizes\u000a - Supports limited depth, regex filtering, glob matching, mime-type filtering, extension filtering\u000a - Easy as hell to write plugins for\u000a\u000a-----\u000a## Usage\u000a\u000a```js\u000a\u0009var Tree = require('skywalker');\u000a\u000a\u0009Tree('~/some_dir')\u000a\u0009\u0009.ignoreDotFiles()\u000a\u0009\u0009.ignore(/(^|\\/)_.*?$/g) //ignores files that begin with \"_\"\u000a\u0009\u0009.filter(/something/g,function(next,done){\u000a\u0009\u0009\u0009console.log('runs for each file or directory that match \"something\"');\u000a\u0009\u0009\u0009next()\u000a\u0009\u0009})\u000a\u0009\u0009.filter(/(^|\\/)_.*?$/g,function(next,done){\u000a\u0009\u0009\u0009console.log('rejects all files or directories that begin with \"_\"',this._.path);\u000a\u0009\u0009\u0009done(null,false);\u000a\u0009\u0009})\u000a\u0009\u0009.extensionFilter('json',function(next,done){\u000a\u0009\u0009\u0009console.log('runs for each file that has a json extension');\u000a\u0009\u0009\u0009var file = this;\u000a\u0009\u0009\u0009require('fs').readFile(this._.path,{encoding:'utf8'},function(err,contents){\u000a\u0009\u0009\u0009\u0009if(err){\u000a\u0009\u0009\u0009\u0009\u0009file._.error = err;\u000a\u0009\u0009\u0009\u0009\u0009return next();\u000a\u0009\u0009\u0009\u0009}\u000a\u0009\u0009\u0009\u0009file._.contents = contents;\u000a\u0009\u0009\u0009\u0009try{\u000a\u0009\u0009\u0009\u0009\u0009file.data = JSON.parse(contents);\u000a\u0009\u0009\u0009\u0009}catch(err){\u000a\u0009\u0009\u0009\u0009\u0009file._.error = err;\u000a\u0009\u0009\u0009\u0009}\u000a\u0009\u0009\u0009\u0009next();\u000a\u0009\u0009\u0009})\u000a\u0009\u0009})\u000a\u0009\u0009.on('file',function(file){console.log('file event:',file._.path);})\u000a\u0009\u0009.on('directory',function(file){console.log('directory event:',file._.path);})\u000a\u0009\u0009.on('done',function(file){console.log('-----------------------');})\u000a\u0009\u0009.emitErrors(true)\u000a\u0009\u0009.on('error',function(err){console.log('ERROR',err);})\u000a\u0009\u0009.start(function(err,file){\u000a\u0009\u0009\u0009if(err){return console.log(err);}\u000a\u0009\u0009\u0009for(var n in file){\u000a\u0009\u0009\u0009\u0009console.log(file[n]);\u000a\u0009\u0009\u0009}\u000a\u0009\u0009\u0009/**or**/\u000a\u0009\u0009\u0009var children = file._.children;\u000a\u0009\u0009\u0009for(var i=0 ; i < children.length ; i++){\u000a\u0009\u0009\u0009\u0009console.log(children[i]._.name);\u000a\u0009\u0009\u0009}\u000a\u0009\u0009})\u000a\u0009;\u000a```\u000a\u000aIf for some reason you want to set the root directory name later (not at instantiation), do that:\u000a\u000a```js\u000a\u0009Tree()\u000a\u0009\u0009.file('path_to_file')\u000a\u0009\u0009//other things\u000a\u0009\u0009.start(callback)\u000a\u000a```\u000a\u000aBy default, skywalker does not emit errors, as it is expected that they will be handled in callbacks.\u000aHowever, if you prefer event-style error handling, do the following:\u000a\u000a```js\u000a\u0009Tree(dir)\u000a\u0009.emitError(true)\u000a\u0009.on('error',function(err){\u000a\u0009\u0009console.log('error',err);\u000a\u0009})\u000a\u0009.start(func);\u000a```\u000a\u000aDirectories children are accessible in two manners:\u000a```js\u000a\u0009var t = Tree(dir).start(function(err,files){\u000a\u0009\u0009//either use:\u000a\u0009\u0009files._.children;\u000a\u0009\u0009for(var i = 0, l = files._.children.length;i < l;i++){\u000a\u0009\u0009\u0009console.log(files._.children[i]._.filename);\u000a\u0009\u0009}\u000a\u0009\u0009//or:\u000a\u0009\u0009files['child_name.jpg'];\u000a\u0009\u0009//or even:\u000a\u0009\u0009files['subdir']['child_name.jpg'];\u000a\u0009\u0009for(var n in files){\u000a\u0009\u0009\u0009console.log(n,files[n]._.path);\u000a\u0009\u0009}\u000a\u0009});\u000a```\u000aChildren always exists on all `file` instances, even when they are not directories, so you can safely just loop, and the loop will not run when `children.length` is 0.  \u000aAny property other than children is not enumerable, so `for...in` loops are also safe to use without prior checking if the file is a directory.  \u000a\u000aHowever, if you have a filter running that disables files AND you are watching, then a file might be null, so you might want to do:\u000a\u000a```js\u000a\u0009var t = Tree(dir).start(function(err,files){\u000a\u0009\u0009for(var n in files){\u000a\u0009\u0009\u0009if(!files[n]){continue;}\u000a\u0009\u0009\u0009console.log(n,files[n]._.path);\u000a\u0009\u0009}\u000a\u0009});\u000a```\u000a\u000a\u000a-----\u000a## Files Properties\u000a\u000aAll properties (name, path, etc) are stored on a property named \"_\".\u000aThe following properties are to be found:\u000a\u000a\u000a - `file._.path`  full path to the file\u000a - `file._.dirname`  parent dir of the file\u000a - `file._.filename`  filename of the file, including extension\u000a - `file._.extension`  extension, without the dot, and in lowercase\u000a - `file._.name`  filename without extension\u000a - `file._.children`  only for directories: an array of children\u000a - `file._.parents`  an array of parents (backref to the parents)\u000a - `file._.contents`  empty, fill it with a string if your own callbacks\u000a - `file._.mime`  mimetype, for example 'text/plain'\u000a - `file._.mime.type`  for example 'text'\u000a - `file._.mime.subType` for example, 'plain'\u000a - `file._.isDirectory` true for directories, false for everything else\u000a - and all `stats` properties, which are:\u000a \u0009+ `dev`\u000a \u0009+ `mode`\u000a \u0009+ `nlink`\u000a \u0009+ `uid`\u000a \u0009+ `gid`\u000a \u0009+ `rdev`\u000a \u0009+ `blksize`\u000a \u0009+ `ino`\u000a \u0009+ `size` works for directories too\u000a \u0009+ `blocks`\u000a \u0009+ `atime` converted to a unix timestamp\u000a \u0009+ `mtime` converted to a unix timestamp\u000a \u0009+ `ctime` converted to a unix timestamp\u000a\u000aPlugins may add properties to this object (see below).\u000a\u000aIf you have, in your path, a file or folder named \"_\", then the properties of its parent will be overwritten.\u000aIn that case, you have two options:  \u000a1 - Change the default namespace:\u000a```js\u000a\u0009Tree.propertiesPropertyKey('_somethingsafe_');\u000a\u0009// later...\u000a\u0009console.log(file._somethingsafe_.path)\u000a```\u000a2 - use the 'safe' namespace:\u000a```js\u000a\u0009console.log(file.__________.path);\u000a\u0009// Yes, that's 10 \"_\".\u000a\u0009// If you have a file named like that too,\u000a\u0009// then you are shit out of luck.\u000a```\u000aNote that both keys are usable at all times.\u000a\u000aThe default toString() function outputs the file's path, but if you set the `contents` property of the file...\u000a\u000a```js\u000a\u0009file._.contents = 'abcde';\u000a```\u000a\u000a...Then this is what toString() will output.\u000a\u000a\u000aTo detect mimetypes, skywalker uses [node-mime](https://github.com/broofa/node-mime). It is made available on the `Tree.mime` namespace\u000a\u000a```js\u000a\u0009//define a new mime-type:\u000a\u0009Tree.mime.define({\u000a\u0009\u0009'text/jade':['jade']\u000a\u0009})\u000a```\u000a\u000a------\u000a## Watch\u000a\u000aSkywalker doesn't know how to watch, but it is \"watch-ready\". Thus, you are able to implement any watching system you like.\u000aswap `start([callback])` with `watch(watchFunction[,callback])`\u000a\u000a`watchFunction` receives two arguments: a \"watchHelpers\" object that contains helpers, and a callback function to run when ready.\u000a\u000a```js\u000a\u0009var t = Tree(dir)\u000a\u0009\u0009.on(/** something, function **/)\u000a\u0009\u0009/**...**/\u000a\u0009\u0009.watch(function(watchHelpers,done){\u000a\u0009\u0009\u0009var watcher = myWatchImplementation(watchHelpers.filename);\u000a\u0009\u0009\u0009watcher.on('new',function(filename){\u000a\u0009\u0009\u0009\u0009watchHelper.onCreated(filename);\u000a\u0009\u0009\u0009});\u000a\u0009\u0009\u0009watcher.on('systemError',function(err){\u000a\u0009\u0009\u0009\u0009done(err);\u000a\u0009\u0009\u0009});\u000a\u0009\u0009\u0009watcher.on('ready',function(){\u000a\u0009\u0009\u0009\u0009done(null,function(){watcher.stop();})\u000a\u0009\u0009\u0009});\u000a\u0009\u0009},callback)\u000a\u0009;\u000a\u0009//later:\u000a\u0009t.unwatch(); //calls watcher.stop()\u000a```\u000a\u000aAvailable helpers are:\u000a\u000a- `watchHelpers.filename` the root directory\u000a- `watchHelpers.tree` the skywalker instance\u000a- `watchHelpers.onCreated(filepath)`\u000a- `watchHelpers.onChanged(filepath)`\u000a- `watchHelpers.onRemoved(filepath)`\u000a- `watchHelpers.onRenamed(filepathNew,filepathOld)`\u000a- `watchHelpers.onError(error)`\u000a\u000aLook in /watchers for an example implementation\u000a\u000aAs an alternative to implementing your own function, you may simply specify the implementation like so:\u000a```js\u000a\u0009var t = Tree(dir)\u000a\u0009\u0009.on(/** something, function **/)\u000a\u0009\u0009/**...**/\u000a\u0009\u0009.watch('gaze',callback)\u000a```\u000a\u000aAvailable implementations are [gaze](https://github.com/shama/gaze), [watch](https://github.com/mikeal/watch), and [chokidar](https://github.com/paulmillr/chokidar). Note that they are not bundled with skywalker and that you will have to install them separately.\u000a\u000a------\u000a## Events\u000a\u000athe following events are emitted from Skywalker:\u000a\u000a- FILE: 'file': emitted when a file is processed\u000a- DIRECTORY: 'directory': emitted when a directory is processed\u000a- DONE: 'done': emitted when all files have been processed\u000a- ERROR: 'error': emitted when an error is encountered\u000a- CREATED: 'created': emitted when a file or directory is created (if `watch()`ing)\u000a- REMOVED: 'remove': emitted when a file or directory is deleted (if `watch()`ing)\u000a- CHANGED: 'change': emitted when a file or directory is modified (if `watch()`ing)\u000a- RENAMED: 'rename': emitted when a file or directory is renamed (if `watch()`ing)\u000a\u000aThe events strings live on Skywalker.Events, so instead of `on('error')`, you can use `on(Tree.Events.ERROR)`.\u000a\u000a------\u000a## Filters\u000aThere are several available filters, they all have the same signature:\u000a`filterFunction(regex|glob|null,func)`\u000a\u000a- `regex or glob` is either a regex or a string. If nothing is provided, the filter will match every file and directory\u000a- `func` is a function with signature `callback(next,done)`. Next() processes the next file, and done() interrupts the current directory processing. You can call done(err) to output an error.\u000a\u000aAvailable filters are:\u000a\u000a- `filter(regex|glob,func)`: basic filter\u000a- `directoryFilter(regex|glob,func)`: acts only on directories\u000a- `fileFilter(regex|glob,func)`: acts only on files\u000a- `extensionFilter(string,func)`: you can provide a space-separated string of extension (`jpg jpeg bmp`), will act only on those extensions\u000a- `mimeFilter(regex|glob,func)`: will act only on matched mime type\u000a**Careful!** `fileFilter`, `mimefilter` and `extensionFilter` will *not* descend in sub-directories! Use a normal filter for that.\u000a\u000aAdditionally, you have some convenience filters to ignore things:\u000a- `ignore(regex|glob)`: will ignore files that match the pattern\u000a- `ignoreDirectories(regex|glob)`: you know what this does\u000a- `ignoreFiles(regex|glob)`: that too\u000a- `ignoreDotFiles()`: ignores files and directories that begin with '.'\u000a\u000aFor an wide array of examples, check out [skywalker-extended](https://github.com/Xananax/skywalker-extended)\u000a\u000a-----\u000a## Selectors\u000aSelectors run *after* the tree has been parsed and allow for further filtering.\u000a\u000a```js\u000a\u0009var Tree = require('skywalker');\u000a\u0009var db = Tree.db;\u000a\u0009Tree(__dirname)\u000a\u0009\u0009.ignoreDotFiles()\u000a\u0009\u0009.selectors('F & size > 6100')\u000a\u0009\u0009.start(function(err,file){\u000a\u0009\u0009\u0009var c = file._.children;\u000a\u0009\u0009\u0009for(var n in c){console.log(c[n]._.path)}\u000a\u0009\u0009})\u000a```\u000a\u000aA selector presents itself as such:\u000a`property operator value`\u000a\u000a- `property` is any property of the file, found on the `_` object. That is any 'native' property, or any property added by a plugin\u000a- `operator` is one of the operators below\u000a- `value` is the value compared to. some operators don't require a value\u000a\u000aYou can chain selectors with '&'.\u000aAvailable selectors are:\u000a\u000a- Selectors with properties:\u000a\u0009- `GREATER_THAN : '>'` example: `size > 6100`\u000a\u0009- `LOWER_THAN: '<'` example: `atime < 1416242596`\u000a\u0009- `GREATER_OR_EQUAL: '>='` \u000a\u0009- `LOWER_OR_EQUAL: '<='`\u000a\u0009- `EQUAL: '=='`\u000a\u0009- `EQUAL_STRICT: '==='`\u000a\u0009- `MATCHES: '#'` example: `path # node_modules`\u000a- Selectors that require a value only:\u000a\u0009- `EXTENSION: '.'` example `. jpg` (does not require a property)\u000a\u0009- `PATH: '/'` example `/ node_modules` (similar to the `matches` example above, but globbing is allowed)\u000a\u0009- `MIMETYPE: '@'` example: `@ text/javascript`\u000a- Selectors that require an operator only:\u000a\u0009- `ISDIR: 'D'`\u000a\u0009- `ISFILE:'F'`\u000a\u000a-----\u000a## Plugins\u000a\u000aSkywalker ships with a few examples plugins (not loaded, copy-paste them where you need them). They are:\u000a\u000a- checksum: outputs a checksum string in a property called `checksum`. Needs the `checksum` module.\u000a- images: outputs size (width,height), imageMode (landscape, portrait, square) and ratio (1.xxx) to the \"_\" property of images. Needs the `image-size` module.\u000a- json: parses json files. Sets the raw data on the \"\\_.contents\" and the parsed data on \"\\_.data\"\u000a- markdown: parses markdown files. Sets the raw data on \"\\_.contents\" and the rendered content on \"\\_.rendered\". Needs the `markdown` module.\u000a- size: adds a human readable size property called `humanSize`. Needs the `filesize` module.\u000a- websafe: turns file names (\"my nice image.jpeg\") to a string that can be used in a classname or as an id (\"my_nice_image\"), and sets it on the \"_.safename\" property\u000a\u000aadd a plugin by calling  \u000a`Tree(dir).plugin(require('path-to-plugin').start(...`\u000a\u000a**Be careful, order of filters and plugins does matter**\u000a\u000a-----\u000a## More Info & Examples\u000aCheck out the tests.\u000a* install moka and chai:\u000a`npm install -g mocha chai`\u000a* run the tests\u000a`cd skywalker && mocha`\u000a\u000a----\u000a## License\u000aMIT\u000a","readmeFilename":"README.md","gitHead":"d8498b51b4dca616695dffcb351332c70b4edcf5","_id":"skywalker@0.2.2","_shasum":"d96f0349da2e484df4579ceb70b29ad6a17a031f","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"xananax","email":"xananax@yelostudio.com"},"maintainers":[{"name":"xananax","email":"xananax@yelostudio.com"}],"dist":{"shasum":"d96f0349da2e484df4579ceb70b29ad6a17a031f","tarball":"http://registry.npmjs.org/skywalker/-/skywalker-0.2.2.tgz"}}: skywalker
32 verbose stack     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:234:14)
32 verbose stack     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
32 verbose stack     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:372:22)
32 verbose stack     at Request.emit (events.js:98:17)
32 verbose stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1317:14)
32 verbose stack     at Request.emit (events.js:117:20)
32 verbose stack     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1265:12)
32 verbose stack     at IncomingMessage.emit (events.js:117:20)
32 verbose stack     at _stream_readable.js:943:16
32 verbose stack     at process._tickCallback (node.js:419:13)
33 verbose statusCode 403
34 verbose pkgid skywalker
35 verbose cwd /home/xananax/projects/skywalker
36 error Linux 3.17.3-1-ARCH
37 error argv "/usr/bin/node" "/usr/bin/npm" "publish"
38 error node v0.10.33
39 error npm  v2.1.10
40 error code E403
41 error forbidden cannot modify pre-existing version: 0.2.2
41 error old={"name":"skywalker","version":"0.2.2","description":"Walks a directory tree and transforms loaded nodes","main":"index.js","keywords":["fs","directory","walk","eventEmitter"],"author":{"name":"xananax@yelostudio.com"},"license":"MIT","directories":{"test":"test"},"dependencies":{"mime":"^1.2.11","minimatch":"^1.0.0","node.extend":"^1.0.10"},"devDependencies":{"chai":"^1.9.2","mocha":"^2.0.1","checksum":"^0.1.1","filesize":"^2.0.4","image-size":"^0.3.5","markdown":"^0.5.0"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/Xananax/skywalker.git"},"bugs":{"url":"https://github.com/Xananax/skywalker/issues"},"homepage":"https://github.com/Xananax/skywalker","gitHead":"2d7b7b93676dadb5b16476a94be847002f8f5124","_id":"skywalker@0.2.2","_shasum":"e832ecac58358847becbd23372a4157ea1b7ad9b","_from":".","_npmVersion":"2.1.7","_nodeVersion":"0.10.33","_npmUser":{"name":"xananax","email":"xananax@yelostudio.com"},"maintainers":[{"name":"xananax","email":"xananax@yelostudio.com"}],"dist":{"shasum":"e832ecac58358847becbd23372a4157ea1b7ad9b","tarball":"http://registry.npmjs.org/skywalker/-/skywalker-0.2.2.tgz"}}
41 error new={"name":"skywalker","version":"0.2.2","description":"Walks a directory tree and transforms loaded nodes","main":"index.js","keywords":["fs","directory","walk","eventEmitter"],"author":{"name":"xananax@yelostudio.com"},"license":"MIT","directories":{"test":"test"},"dependencies":{"mime":"^1.2.11","minimatch":"^1.0.0","node.extend":"^1.0.10"},"devDependencies":{"chokidar":"^0.11.1","watch":"^0.13.0","gaze":"^0.6.4","chai":"^1.9.2","mocha":"^2.0.1","checksum":"^0.1.1","filesize":"^2.0.4","image-size":"^0.3.5","markdown":"^0.5.0"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/Xananax/skywalker.git"},"bugs":{"url":"https://github.com/Xananax/skywalker/issues"},"homepage":"https://github.com/Xananax/skywalker","readme":"# Skywalker\u000a\u000aWalks a directory or a file and optionally applies transformations on the tree's members.\u000aThere are other modules that do the same, I didn't like them, rolled my own.\u000a\u000a_Can't believe skywalker was not already in use on npmjs._\u000a\u000a-----\u000a## Install\u000a```bash\u000a\u0009npm install skywalker\u000a```\u000a\u000a----\u000a## Features\u000a\u000a - Easy to use\u000a - Callbacks or evented style\u000a - Directory sizes\u000a - Supports limited depth, regex filtering, glob matching, mime-type filtering, extension filtering\u000a - Easy as hell to write plugins for\u000a\u000a-----\u000a## Usage\u000a\u000a```js\u000a\u0009var Tree = require('skywalker');\u000a\u000a\u0009Tree('~/some_dir')\u000a\u0009\u0009.ignoreDotFiles()\u000a\u0009\u0009.ignore(/(^|\\/)_.*?$/g) //ignores files that begin with \"_\"\u000a\u0009\u0009.filter(/something/g,function(next,done){\u000a\u0009\u0009\u0009console.log('runs for each file or directory that match \"something\"');\u000a\u0009\u0009\u0009next()\u000a\u0009\u0009})\u000a\u0009\u0009.filter(/(^|\\/)_.*?$/g,function(next,done){\u000a\u0009\u0009\u0009console.log('rejects all files or directories that begin with \"_\"',this._.path);\u000a\u0009\u0009\u0009done(null,false);\u000a\u0009\u0009})\u000a\u0009\u0009.extensionFilter('json',function(next,done){\u000a\u0009\u0009\u0009console.log('runs for each file that has a json extension');\u000a\u0009\u0009\u0009var file = this;\u000a\u0009\u0009\u0009require('fs').readFile(this._.path,{encoding:'utf8'},function(err,contents){\u000a\u0009\u0009\u0009\u0009if(err){\u000a\u0009\u0009\u0009\u0009\u0009file._.error = err;\u000a\u0009\u0009\u0009\u0009\u0009return next();\u000a\u0009\u0009\u0009\u0009}\u000a\u0009\u0009\u0009\u0009file._.contents = contents;\u000a\u0009\u0009\u0009\u0009try{\u000a\u0009\u0009\u0009\u0009\u0009file.data = JSON.parse(contents);\u000a\u0009\u0009\u0009\u0009}catch(err){\u000a\u0009\u0009\u0009\u0009\u0009file._.error = err;\u000a\u0009\u0009\u0009\u0009}\u000a\u0009\u0009\u0009\u0009next();\u000a\u0009\u0009\u0009})\u000a\u0009\u0009})\u000a\u0009\u0009.on('file',function(file){console.log('file event:',file._.path);})\u000a\u0009\u0009.on('directory',function(file){console.log('directory event:',file._.path);})\u000a\u0009\u0009.on('done',function(file){console.log('-----------------------');})\u000a\u0009\u0009.emitErrors(true)\u000a\u0009\u0009.on('error',function(err){console.log('ERROR',err);})\u000a\u0009\u0009.start(function(err,file){\u000a\u0009\u0009\u0009if(err){return console.log(err);}\u000a\u0009\u0009\u0009for(var n in file){\u000a\u0009\u0009\u0009\u0009console.log(file[n]);\u000a\u0009\u0009\u0009}\u000a\u0009\u0009\u0009/**or**/\u000a\u0009\u0009\u0009var children = file._.children;\u000a\u0009\u0009\u0009for(var i=0 ; i < children.length ; i++){\u000a\u0009\u0009\u0009\u0009console.log(children[i]._.name);\u000a\u0009\u0009\u0009}\u000a\u0009\u0009})\u000a\u0009;\u000a```\u000a\u000aIf for some reason you want to set the root directory name later (not at instantiation), do that:\u000a\u000a```js\u000a\u0009Tree()\u000a\u0009\u0009.file('path_to_file')\u000a\u0009\u0009//other things\u000a\u0009\u0009.start(callback)\u000a\u000a```\u000a\u000aBy default, skywalker does not emit errors, as it is expected that they will be handled in callbacks.\u000aHowever, if you prefer event-style error handling, do the following:\u000a\u000a```js\u000a\u0009Tree(dir)\u000a\u0009.emitError(true)\u000a\u0009.on('error',function(err){\u000a\u0009\u0009console.log('error',err);\u000a\u0009})\u000a\u0009.start(func);\u000a```\u000a\u000aDirectories children are accessible in two manners:\u000a```js\u000a\u0009var t = Tree(dir).start(function(err,files){\u000a\u0009\u0009//either use:\u000a\u0009\u0009files._.children;\u000a\u0009\u0009for(var i = 0, l = files._.children.length;i < l;i++){\u000a\u0009\u0009\u0009console.log(files._.children[i]._.filename);\u000a\u0009\u0009}\u000a\u0009\u0009//or:\u000a\u0009\u0009files['child_name.jpg'];\u000a\u0009\u0009//or even:\u000a\u0009\u0009files['subdir']['child_name.jpg'];\u000a\u0009\u0009for(var n in files){\u000a\u0009\u0009\u0009console.log(n,files[n]._.path);\u000a\u0009\u0009}\u000a\u0009});\u000a```\u000aChildren always exists on all `file` instances, even when they are not directories, so you can safely just loop, and the loop will not run when `children.length` is 0.  \u000aAny property other than children is not enumerable, so `for...in` loops are also safe to use without prior checking if the file is a directory.  \u000a\u000aHowever, if you have a filter running that disables files AND you are watching, then a file might be null, so you might want to do:\u000a\u000a```js\u000a\u0009var t = Tree(dir).start(function(err,files){\u000a\u0009\u0009for(var n in files){\u000a\u0009\u0009\u0009if(!files[n]){continue;}\u000a\u0009\u0009\u0009console.log(n,files[n]._.path);\u000a\u0009\u0009}\u000a\u0009});\u000a```\u000a\u000a\u000a-----\u000a## Files Properties\u000a\u000aAll properties (name, path, etc) are stored on a property named \"_\".\u000aThe following properties are to be found:\u000a\u000a\u000a - `file._.path`  full path to the file\u000a - `file._.dirname`  parent dir of the file\u000a - `file._.filename`  filename of the file, including extension\u000a - `file._.extension`  extension, without the dot, and in lowercase\u000a - `file._.name`  filename without extension\u000a - `file._.children`  only for directories: an array of children\u000a - `file._.parents`  an array of parents (backref to the parents)\u000a - `file._.contents`  empty, fill it with a string if your own callbacks\u000a - `file._.mime`  mimetype, for example 'text/plain'\u000a - `file._.mime.type`  for example 'text'\u000a - `file._.mime.subType` for example, 'plain'\u000a - `file._.isDirectory` true for directories, false for everything else\u000a - and all `stats` properties, which are:\u000a \u0009+ `dev`\u000a \u0009+ `mode`\u000a \u0009+ `nlink`\u000a \u0009+ `uid`\u000a \u0009+ `gid`\u000a \u0009+ `rdev`\u000a \u0009+ `blksize`\u000a \u0009+ `ino`\u000a \u0009+ `size` works for directories too\u000a \u0009+ `blocks`\u000a \u0009+ `atime` converted to a unix timestamp\u000a \u0009+ `mtime` converted to a unix timestamp\u000a \u0009+ `ctime` converted to a unix timestamp\u000a\u000aPlugins may add properties to this object (see below).\u000a\u000aIf you have, in your path, a file or folder named \"_\", then the properties of its parent will be overwritten.\u000aIn that case, you have two options:  \u000a1 - Change the default namespace:\u000a```js\u000a\u0009Tree.propertiesPropertyKey('_somethingsafe_');\u000a\u0009// later...\u000a\u0009console.log(file._somethingsafe_.path)\u000a```\u000a2 - use the 'safe' namespace:\u000a```js\u000a\u0009console.log(file.__________.path);\u000a\u0009// Yes, that's 10 \"_\".\u000a\u0009// If you have a file named like that too,\u000a\u0009// then you are shit out of luck.\u000a```\u000aNote that both keys are usable at all times.\u000a\u000aThe default toString() function outputs the file's path, but if you set the `contents` property of the file...\u000a\u000a```js\u000a\u0009file._.contents = 'abcde';\u000a```\u000a\u000a...Then this is what toString() will output.\u000a\u000a\u000aTo detect mimetypes, skywalker uses [node-mime](https://github.com/broofa/node-mime). It is made available on the `Tree.mime` namespace\u000a\u000a```js\u000a\u0009//define a new mime-type:\u000a\u0009Tree.mime.define({\u000a\u0009\u0009'text/jade':['jade']\u000a\u0009})\u000a```\u000a\u000a------\u000a## Watch\u000a\u000aSkywalker doesn't know how to watch, but it is \"watch-ready\". Thus, you are able to implement any watching system you like.\u000aswap `start([callback])` with `watch(watchFunction[,callback])`\u000a\u000a`watchFunction` receives two arguments: a \"watchHelpers\" object that contains helpers, and a callback function to run when ready.\u000a\u000a```js\u000a\u0009var t = Tree(dir)\u000a\u0009\u0009.on(/** something, function **/)\u000a\u0009\u0009/**...**/\u000a\u0009\u0009.watch(function(watchHelpers,done){\u000a\u0009\u0009\u0009var watcher = myWatchImplementation(watchHelpers.filename);\u000a\u0009\u0009\u0009watcher.on('new',function(filename){\u000a\u0009\u0009\u0009\u0009watchHelper.onCreated(filename);\u000a\u0009\u0009\u0009});\u000a\u0009\u0009\u0009watcher.on('systemError',function(err){\u000a\u0009\u0009\u0009\u0009done(err);\u000a\u0009\u0009\u0009});\u000a\u0009\u0009\u0009watcher.on('ready',function(){\u000a\u0009\u0009\u0009\u0009done(null,function(){watcher.stop();})\u000a\u0009\u0009\u0009});\u000a\u0009\u0009},callback)\u000a\u0009;\u000a\u0009//later:\u000a\u0009t.unwatch(); //calls watcher.stop()\u000a```\u000a\u000aAvailable helpers are:\u000a\u000a- `watchHelpers.filename` the root directory\u000a- `watchHelpers.tree` the skywalker instance\u000a- `watchHelpers.onCreated(filepath)`\u000a- `watchHelpers.onChanged(filepath)`\u000a- `watchHelpers.onRemoved(filepath)`\u000a- `watchHelpers.onRenamed(filepathNew,filepathOld)`\u000a- `watchHelpers.onError(error)`\u000a\u000aLook in /watchers for an example implementation\u000a\u000aAs an alternative to implementing your own function, you may simply specify the implementation like so:\u000a```js\u000a\u0009var t = Tree(dir)\u000a\u0009\u0009.on(/** something, function **/)\u000a\u0009\u0009/**...**/\u000a\u0009\u0009.watch('gaze',callback)\u000a```\u000a\u000aAvailable implementations are [gaze](https://github.com/shama/gaze), [watch](https://github.com/mikeal/watch), and [chokidar](https://github.com/paulmillr/chokidar). Note that they are not bundled with skywalker and that you will have to install them separately.\u000a\u000a------\u000a## Events\u000a\u000athe following events are emitted from Skywalker:\u000a\u000a- FILE: 'file': emitted when a file is processed\u000a- DIRECTORY: 'directory': emitted when a directory is processed\u000a- DONE: 'done': emitted when all files have been processed\u000a- ERROR: 'error': emitted when an error is encountered\u000a- CREATED: 'created': emitted when a file or directory is created (if `watch()`ing)\u000a- REMOVED: 'remove': emitted when a file or directory is deleted (if `watch()`ing)\u000a- CHANGED: 'change': emitted when a file or directory is modified (if `watch()`ing)\u000a- RENAMED: 'rename': emitted when a file or directory is renamed (if `watch()`ing)\u000a\u000aThe events strings live on Skywalker.Events, so instead of `on('error')`, you can use `on(Tree.Events.ERROR)`.\u000a\u000a------\u000a## Filters\u000aThere are several available filters, they all have the same signature:\u000a`filterFunction(regex|glob|null,func)`\u000a\u000a- `regex or glob` is either a regex or a string. If nothing is provided, the filter will match every file and directory\u000a- `func` is a function with signature `callback(next,done)`. Next() processes the next file, and done() interrupts the current directory processing. You can call done(err) to output an error.\u000a\u000aAvailable filters are:\u000a\u000a- `filter(regex|glob,func)`: basic filter\u000a- `directoryFilter(regex|glob,func)`: acts only on directories\u000a- `fileFilter(regex|glob,func)`: acts only on files\u000a- `extensionFilter(string,func)`: you can provide a space-separated string of extension (`jpg jpeg bmp`), will act only on those extensions\u000a- `mimeFilter(regex|glob,func)`: will act only on matched mime type\u000a**Careful!** `fileFilter`, `mimefilter` and `extensionFilter` will *not* descend in sub-directories! Use a normal filter for that.\u000a\u000aAdditionally, you have some convenience filters to ignore things:\u000a- `ignore(regex|glob)`: will ignore files that match the pattern\u000a- `ignoreDirectories(regex|glob)`: you know what this does\u000a- `ignoreFiles(regex|glob)`: that too\u000a- `ignoreDotFiles()`: ignores files and directories that begin with '.'\u000a\u000aFor an wide array of examples, check out [skywalker-extended](https://github.com/Xananax/skywalker-extended)\u000a\u000a-----\u000a## Selectors\u000aSelectors run *after* the tree has been parsed and allow for further filtering.\u000a\u000a```js\u000a\u0009var Tree = require('skywalker');\u000a\u0009var db = Tree.db;\u000a\u0009Tree(__dirname)\u000a\u0009\u0009.ignoreDotFiles()\u000a\u0009\u0009.selectors('F & size > 6100')\u000a\u0009\u0009.start(function(err,file){\u000a\u0009\u0009\u0009var c = file._.children;\u000a\u0009\u0009\u0009for(var n in c){console.log(c[n]._.path)}\u000a\u0009\u0009})\u000a```\u000a\u000aA selector presents itself as such:\u000a`property operator value`\u000a\u000a- `property` is any property of the file, found on the `_` object. That is any 'native' property, or any property added by a plugin\u000a- `operator` is one of the operators below\u000a- `value` is the value compared to. some operators don't require a value\u000a\u000aYou can chain selectors with '&'.\u000aAvailable selectors are:\u000a\u000a- Selectors with properties:\u000a\u0009- `GREATER_THAN : '>'` example: `size > 6100`\u000a\u0009- `LOWER_THAN: '<'` example: `atime < 1416242596`\u000a\u0009- `GREATER_OR_EQUAL: '>='` \u000a\u0009- `LOWER_OR_EQUAL: '<='`\u000a\u0009- `EQUAL: '=='`\u000a\u0009- `EQUAL_STRICT: '==='`\u000a\u0009- `MATCHES: '#'` example: `path # node_modules`\u000a- Selectors that require a value only:\u000a\u0009- `EXTENSION: '.'` example `. jpg` (does not require a property)\u000a\u0009- `PATH: '/'` example `/ node_modules` (similar to the `matches` example above, but globbing is allowed)\u000a\u0009- `MIMETYPE: '@'` example: `@ text/javascript`\u000a- Selectors that require an operator only:\u000a\u0009- `ISDIR: 'D'`\u000a\u0009- `ISFILE:'F'`\u000a\u000a-----\u000a## Plugins\u000a\u000aSkywalker ships with a few examples plugins (not loaded, copy-paste them where you need them). They are:\u000a\u000a- checksum: outputs a checksum string in a property called `checksum`. Needs the `checksum` module.\u000a- images: outputs size (width,height), imageMode (landscape, portrait, square) and ratio (1.xxx) to the \"_\" property of images. Needs the `image-size` module.\u000a- json: parses json files. Sets the raw data on the \"\\_.contents\" and the parsed data on \"\\_.data\"\u000a- markdown: parses markdown files. Sets the raw data on \"\\_.contents\" and the rendered content on \"\\_.rendered\". Needs the `markdown` module.\u000a- size: adds a human readable size property called `humanSize`. Needs the `filesize` module.\u000a- websafe: turns file names (\"my nice image.jpeg\") to a string that can be used in a classname or as an id (\"my_nice_image\"), and sets it on the \"_.safename\" property\u000a\u000aadd a plugin by calling  \u000a`Tree(dir).plugin(require('path-to-plugin').start(...`\u000a\u000a**Be careful, order of filters and plugins does matter**\u000a\u000a-----\u000a## More Info & Examples\u000aCheck out the tests.\u000a* install moka and chai:\u000a`npm install -g mocha chai`\u000a* run the tests\u000a`cd skywalker && mocha`\u000a\u000a----\u000a## License\u000aMIT\u000a","readmeFilename":"README.md","gitHead":"d8498b51b4dca616695dffcb351332c70b4edcf5","_id":"skywalker@0.2.2","_shasum":"d96f0349da2e484df4579ceb70b29ad6a17a031f","_from":".","_npmVersion":"2.1.10","_nodeVersion":"0.10.33","_npmUser":{"name":"xananax","email":"xananax@yelostudio.com"},"maintainers":[{"name":"xananax","email":"xananax@yelostudio.com"}],"dist":{"shasum":"d96f0349da2e484df4579ceb70b29ad6a17a031f","tarball":"http://registry.npmjs.org/skywalker/-/skywalker-0.2.2.tgz"}}: skywalker
42 error If you need help, you may report this error at:
42 error     <http://github.com/npm/npm/issues>
43 verbose exit [ 1, true ]
